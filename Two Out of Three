class Solution {
public:
    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {
        
        unordered_map<int,int>mp;
        vector<int>ans;
        for(int i=0;i<nums1.size();i++)
        { mp[nums1[i]]=1;}

        for(int i=0;i<nums2.size();i++)
        {   
            if(mp[nums2[i]]==1)
            { //This is for taking common between nums1 and nums2.
                ans.push_back(nums2[i]);
                mp[nums2[i]]=2;
            }
            else if(mp[nums2[i]]==0)
            {mp[nums2[i]]=3;}
        }
        for(int i=0;i<nums3.size();i++)
        {
            // We cant take the same value to ans repeatedly therefore we add which is new , thats 
            // why we take mp[nums[i]]==1 and for taking common from nums2 and nums3 mp[nums3[i]]==3.
            if(mp[nums3[i]]==1)
            {  //This is for taking common between nums1 and nums3.
                ans.push_back(nums3[i]);
                mp[nums3[i]]=2;
            }
            else if(mp[nums3[i]]==3)
            {   //This is for taking common between nums2 and nums3.    
                ans.push_back(nums3[i]);
                mp[nums3[i]]=4;
            }
        }

        return ans;
    }
};
